name: "Gemini CLI Action"
description: "General-purpose Gemini agent for GitHub PRs and issues. Can answer questions and implement code changes."
branding:
  icon: "at-sign"
  color: "orange"

inputs:
  trigger_phrase:
    description: "The trigger phrase to look for in comments or issue body"
    required: false
    default: "@gemini"
  assignee_trigger:
    description: "The assignee username that triggers the action (e.g. @gemini)"
    required: false
  label_trigger:
    description: "The label that triggers the action (e.g. gemini)"
    required: false
    default: "gemini"
  base_branch:
    description: "The branch to use as the base/source when creating new branches (defaults to repository default branch)"
    required: false
  branch_prefix:
    description: "The prefix to use for Gemini branches (defaults to 'gemini/', use 'gemini-' for dash format)"
    required: false
    default: "gemini/"

  # Gemini CLI configuration
  model:
    description: "Gemini model to use (e.g. gemini-2.0-flash-exp, gemini-1.5-pro)"
    required: false
    default: "gemini-2.5-pro"
  allowed_tools:
    description: "Additional tools for Gemini to use (the base GitHub tools will always be included)"
    required: false
    default: ""
  disallowed_tools:
    description: "Tools that Gemini should never use"
    required: false
    default: ""
  custom_instructions:
    description: "Additional custom instructions to include in the prompt for Gemini"
    required: false
    default: ""
  direct_prompt:
    description: "Direct instruction for Gemini (bypasses normal trigger detection)"
    required: false
    default: ""
  mcp_config:
    description: "Additional MCP configuration (JSON string) that merges with the built-in GitHub MCP servers"
  gemini_env:
    description: "Custom environment variables to pass to Gemini CLI execution (YAML format)"
    required: false
    default: ""

  # Auth configuration
  gemini_api_key:
    description: "Gemini API key (required for direct API, not needed for Vertex)"
    required: false
  github_token:
    description: "GitHub token with repo and pull request permissions (optional if using GitHub App)"
    required: false
  use_vertex:
    description: "Use Google Vertex AI with OIDC authentication instead of direct Gemini API"
    required: false
    default: "false"

  max_turns:
    description: "Maximum number of conversation turns"
    required: false
    default: ""
  timeout_minutes:
    description: "Timeout in minutes for execution"
    required: false
    default: "30"

outputs:
  execution_file:
    description: "Path to the Gemini CLI execution output file"
    value: ${{ steps.gemini-cli.outputs.execution_file }}

runs:
  using: "composite"
  steps:
    - name: Install Bun
      uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # https://github.com/oven-sh/setup-bun/releases/tag/v2.0.2
      with:
        bun-version: 1.2.11

    - name: Install Dependencies
      shell: bash
      run: |
        cd ${GITHUB_ACTION_PATH}
        bun install

    - name: Prepare action
      id: prepare
      shell: bash
      run: |
        bun run ${GITHUB_ACTION_PATH}/src/entrypoints/prepare.ts
      env:
        TRIGGER_PHRASE: ${{ inputs.trigger_phrase }}
        ASSIGNEE_TRIGGER: ${{ inputs.assignee_trigger }}
        BASE_BRANCH: ${{ inputs.base_branch }}
        BRANCH_PREFIX: ${{ inputs.branch_prefix }}
        ALLOWED_TOOLS: ${{ inputs.allowed_tools }}
        DISALLOWED_TOOLS: ${{ inputs.disallowed_tools }}
        CUSTOM_INSTRUCTIONS: ${{ inputs.custom_instructions }}
        DIRECT_PROMPT: ${{ inputs.direct_prompt }}
        MCP_CONFIG: ${{ inputs.mcp_config }}
        OVERRIDE_GITHUB_TOKEN: ${{ inputs.github_token }}
        GITHUB_RUN_ID: ${{ github.run_id }}

    - name: Install Gemini CLI
      if: steps.prepare.outputs.contains_trigger == 'true'
      shell: bash
      run: |
        # Check if gemini CLI is already available
        if ! command -v gemini &> /dev/null; then
          echo "Installing Gemini CLI..."
          npm install -g @google/gemini-cli
          echo "Gemini CLI installed successfully"
        else
          echo "Gemini CLI already available"
        fi

    - name: Run Gemini CLI
      id: gemini-cli
      if: steps.prepare.outputs.contains_trigger == 'true'
      shell: bash
      run: |
        # Read prompt from file and execute Gemini CLI
        PROMPT_CONTENT=$(cat "$PROMPT_FILE")
        
        # Build Gemini CLI command
        GEMINI_ARGS="--yolo"
        
        # Add model if specified
        if [ -n "$GEMINI_MODEL" ]; then
          GEMINI_ARGS="$GEMINI_ARGS --model $GEMINI_MODEL"
        fi
        
        # Add debug mode if enabled
        if [ "$DEBUG_MODE" = "true" ]; then
          GEMINI_ARGS="$GEMINI_ARGS --debug"
        fi
        
        # Execute Gemini CLI with prompt
        echo "Executing: gemini $GEMINI_ARGS --prompt \"\$PROMPT_CONTENT\""
        gemini $GEMINI_ARGS --prompt "$PROMPT_CONTENT"
      env:
        # Model configuration
        GEMINI_MODEL: ${{ inputs.model }}
        GITHUB_TOKEN: ${{ steps.prepare.outputs.GITHUB_TOKEN }}
        GEMINI_API_KEY: ${{ inputs.gemini_api_key }}
        
        # Gemini CLI configuration
        PROMPT_FILE: ${{ runner.temp }}/gemini-prompts/gemini-prompt.txt
        ALLOWED_TOOLS: ${{ env.ALLOWED_TOOLS }}
        DISALLOWED_TOOLS: ${{ env.DISALLOWED_TOOLS }}
        TIMEOUT_MINUTES: ${{ inputs.timeout_minutes }}
        MAX_TURNS: ${{ inputs.max_turns }}
        MCP_CONFIG: ${{ steps.prepare.outputs.mcp_config }}
        GEMINI_ENV: ${{ inputs.gemini_env }}

        # GCP configuration for Vertex AI
        USE_VERTEX: ${{ inputs.use_vertex }}
        GOOGLE_CLOUD_PROJECT: ${{ env.GOOGLE_CLOUD_PROJECT }}
        GOOGLE_CLOUD_LOCATION: ${{ env.GOOGLE_CLOUD_LOCATION }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}

    - name: Update comment with job link
      if: steps.prepare.outputs.contains_trigger == 'true' && steps.prepare.outputs.gemini_comment_id && always()
      shell: bash
      run: |
        bun run ${GITHUB_ACTION_PATH}/src/entrypoints/update-comment-link.ts
      env:
        REPOSITORY: ${{ github.repository }}
        PR_NUMBER: ${{ github.event.issue.number || github.event.pull_request.number }}
        GEMINI_COMMENT_ID: ${{ steps.prepare.outputs.gemini_comment_id }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_TOKEN: ${{ steps.prepare.outputs.GITHUB_TOKEN }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        TRIGGER_COMMENT_ID: ${{ github.event.comment.id }}
        GEMINI_BRANCH: ${{ steps.prepare.outputs.GEMINI_BRANCH }}
        IS_PR: ${{ github.event.issue.pull_request != null || github.event_name == 'pull_request_review_comment' }}
        BASE_BRANCH: ${{ steps.prepare.outputs.BASE_BRANCH }}
        GEMINI_SUCCESS: ${{ steps.gemini-cli.outputs.conclusion == 'success' }}
        OUTPUT_FILE: ${{ steps.gemini-cli.outputs.execution_file || '' }}
        TRIGGER_USERNAME: ${{ github.event.comment.user.login || github.event.issue.user.login || github.event.pull_request.user.login || github.event.sender.login || github.triggering_actor || github.actor || '' }}
        PREPARE_SUCCESS: ${{ steps.prepare.outcome == 'success' }}
        PREPARE_ERROR: ${{ steps.prepare.outputs.prepare_error || '' }}

    - name: Display Gemini CLI Report
      if: steps.prepare.outputs.contains_trigger == 'true' && steps.gemini-cli.outputs.execution_file != ''
      shell: bash
      run: |
        echo "## Gemini CLI Report" >> $GITHUB_STEP_SUMMARY
        echo '```json' >> $GITHUB_STEP_SUMMARY
        cat "${{ steps.gemini-cli.outputs.execution_file }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Revoke app token
      if: always() && inputs.github_token == ''
      shell: bash
      run: |
        curl -L \
          -X DELETE \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ steps.prepare.outputs.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          ${GITHUB_API_URL:-https://api.github.com}/installation/token
